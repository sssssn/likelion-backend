spring:
  security:
    oauth2:
      client:
        # 1. 서비스 제공자에 대한 정보
        # redirect 할 로그인 페이지가 어딘지
        # access token 을 발급 받는 URL 이 어딘지
        # access token 을 제공하여 사용자 정보를 회수할 URL 이 어딘지
        provider:
          # 서비스 제공자 식별자
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id


        # 2. 서비스 제공자를 사용하기 위한 정보
        # 클라이언트(즉, 우리 서버)를 식별하기 위한 정보
        registration:
          # 서비스 제공자 식별자
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            client-name: Naver
            scope:
              - nickname
              - email
              - profile_image
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            client-name: Kakao
            scope:
              - profile_nickname
              - profile_image
              - account_email
  datasource:
    url: jdbc:sqlite:db.sqlite
    driver-class-name: org.sqlite.JDBC
    username: sa
    password: password

  jpa:
    hibernate:
      ddl-auto: create
    database-platform: org.hibernate.community.dialect.SQLiteDialect
    show-sql: true

jwt:
  secret: ${JWT_SECRET}
